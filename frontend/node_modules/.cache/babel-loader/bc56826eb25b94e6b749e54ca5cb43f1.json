{"ast":null,"code":"import { createAsyncThunk, createSlice, isRejectedWithValue } from '@reduxjs/toolkit';\nimport { connectToMetamask, connectToBinance, joinMetamaskAuction, joinBinanceAuction } from './connectWallet';\nconst initialState = {\n  accounts: [],\n  connectedMetamask: false,\n  connectedBinance: false,\n  connectedAccount: 'Not Connected',\n  connectionStatus: 'Not Connected'\n};\nexport const connectMetamask = createAsyncThunk('wallet/connectMetamask', async (arg, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    return await connectToMetamask();\n  } catch (err) {\n    return rejectWithValue(err.response.data);\n  }\n});\nexport const connectBinance = createAsyncThunk('wallet/connectBinance', async (arg, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n\n  try {\n    return await connectToBinance();\n  } catch (err) {\n    return rejectWithValue(err.response.data);\n  }\n});\nexport const joinAuction = createAsyncThunk('wallet/joinAuction', async (bidAmount, _ref3) => {\n  let {\n    getState,\n    rejectWithValue\n  } = _ref3;\n  const state = getState();\n\n  try {\n    if (state.wallet.connectedMetamask) {\n      return await joinMetamaskAuction(bidAmount);\n    } else if (state.wallet.connectedBinance) {\n      return await joinBinanceAuction(bidAmount);\n    }\n  } catch (err) {\n    console.log('catch error');\n    return rejectWithValue(err.message);\n  }\n});\nexport const walletSlice = createSlice({\n  name: 'wallet',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(connectMetamask.fulfilled, (state, action) => {\n      state.connectedMetamask = true;\n      state.connectionStatus = 'Connected to Metamask';\n      state.connectedAccount = action.payload;\n    }).addCase(connectMetamask.rejected, (state, action) => {\n      state.connectionStatus = 'User denied account access';\n    }).addCase(connectBinance.fulfilled, (state, action) => {\n      state.connectedMetamask = true;\n      state.connectionStatus = 'Connected to Binance';\n      state.connectedAccount = action.payload;\n    }).addCase(connectBinance.rejected, (state, action) => {\n      state.connectionStatus = 'User denied account access';\n    }).addCase(joinAuction.fulfilled, (state, action) => {\n      state.connectionStatus = action.payload;\n    }).addCase(joinAuction.rejected, (state, action) => {\n      state.connectionStatus = action.error.message;\n    });\n  }\n});\nexport const selectWallet = state => state.wallet;\nexport default walletSlice.reducer;","map":{"version":3,"sources":["/Users/jerry/Documents/simple-crypto-auction/src/features/wallet/walletSlice.js"],"names":["createAsyncThunk","createSlice","isRejectedWithValue","connectToMetamask","connectToBinance","joinMetamaskAuction","joinBinanceAuction","initialState","accounts","connectedMetamask","connectedBinance","connectedAccount","connectionStatus","connectMetamask","arg","rejectWithValue","err","response","data","connectBinance","joinAuction","bidAmount","getState","state","wallet","console","log","message","walletSlice","name","reducers","extraReducers","builder","addCase","fulfilled","action","payload","rejected","error","selectWallet","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, isRejectedWithValue } from '@reduxjs/toolkit';\nimport { connectToMetamask, connectToBinance, joinMetamaskAuction, joinBinanceAuction } from './connectWallet';\n\nconst initialState = {\n  accounts: [],\n  connectedMetamask: false,\n  connectedBinance: false,\n  connectedAccount: 'Not Connected',\n  connectionStatus: 'Not Connected',\n};\n\nexport const connectMetamask = createAsyncThunk(\n  'wallet/connectMetamask',\n  async (arg, { rejectWithValue }) => {\n    try {\n      return await connectToMetamask();\n    } catch (err) {\n      return rejectWithValue(err.response.data);\n    }\n  }\n);\n\nexport const connectBinance = createAsyncThunk(\n  'wallet/connectBinance',\n  async (arg, { rejectWithValue }) => {\n    try {\n      return await connectToBinance();\n    } catch (err) {\n      return rejectWithValue(err.response.data);\n    }\n  }\n);\n\nexport const joinAuction = createAsyncThunk(\n  'wallet/joinAuction',\n  async (bidAmount, { getState, rejectWithValue }) => {\n    const state = getState();\n    try {\n      if (state.wallet.connectedMetamask) {\n        return await joinMetamaskAuction(bidAmount)\n      } else if (state.wallet.connectedBinance) {\n        return await joinBinanceAuction(bidAmount)\n      }\n    } catch (err) {\n      console.log('catch error');\n      return rejectWithValue(err.message);\n    }\n  });\n\nexport const walletSlice = createSlice({\n  name: 'wallet',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(connectMetamask.fulfilled, (state, action) => {\n        state.connectedMetamask = true;\n        state.connectionStatus = 'Connected to Metamask';\n        state.connectedAccount = action.payload;\n      })\n      .addCase(connectMetamask.rejected, (state, action) => {\n        state.connectionStatus = 'User denied account access';\n      })\n      .addCase(connectBinance.fulfilled, (state, action) => {\n        state.connectedMetamask = true;\n        state.connectionStatus = 'Connected to Binance';\n        state.connectedAccount = action.payload;\n      })\n      .addCase(connectBinance.rejected, (state, action) => {\n        state.connectionStatus = 'User denied account access';\n      })\n      .addCase(joinAuction.fulfilled, (state, action) => {\n        state.connectionStatus = action.payload;\n      })\n      .addCase(joinAuction.rejected, (state, action) => {\n        state.connectionStatus = action.error.message;\n      });\n  },\n});\n\nexport const selectWallet = (state) => state.wallet;\n\nexport default walletSlice.reducer;"]},"metadata":{},"sourceType":"module"}
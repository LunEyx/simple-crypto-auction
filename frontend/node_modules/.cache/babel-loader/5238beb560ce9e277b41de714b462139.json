{"ast":null,"code":"import { action } from 'commander';\nimport { connectToMetamask, connectToBinance } from './connectWallet';\nconst initialState = {\n  accounts: [],\n  connectedMetamask: false,\n  connectedBinance: false,\n  etherUnit: \"1000000000000000000\",\n  connectedAccount: 'Not Connected',\n  connectionStatus: 'Not Connected'\n};\nexport const connectMetamask = createAsyncThunk('wallet/connectMetamask', connectToMetamask);\nexport const walletSlice = createSlice({\n  name: 'wallet',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(connectMetamask.fulfilled, (state, action) => {\n      state.connectionStatus = 'Connected to Metamask';\n      state.connectedAccount = action.payload;\n    }).addCase(connectMetamask.rejected, (state, action) => {\n      state.connectionStatus = 'User denied account access' + action.error;\n    });\n  }\n});\nexport const selectWallet = state => state.wallet;","map":{"version":3,"sources":["/Users/jerry/Documents/simple-crypto-auction/src/features/wallet/walletSlice.js"],"names":["action","connectToMetamask","connectToBinance","initialState","accounts","connectedMetamask","connectedBinance","etherUnit","connectedAccount","connectionStatus","connectMetamask","createAsyncThunk","walletSlice","createSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","payload","rejected","error","selectWallet","wallet"],"mappings":"AAAA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,QAAoD,iBAApD;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,iBAAiB,EAAE,KAFA;AAGnBC,EAAAA,gBAAgB,EAAE,KAHC;AAInBC,EAAAA,SAAS,EAAE,qBAJQ;AAKnBC,EAAAA,gBAAgB,EAAE,eALC;AAMnBC,EAAAA,gBAAgB,EAAE;AANC,CAArB;AASA,OAAO,MAAMC,eAAe,GAAGC,gBAAgB,CAC7C,wBAD6C,EAE7CV,iBAF6C,CAAxC;AAKP,OAAO,MAAMW,WAAW,GAAGC,WAAW,CAAC;AACrCC,EAAAA,IAAI,EAAE,QAD+B;AAErCX,EAAAA,YAFqC;AAGrCY,EAAAA,QAAQ,EAAE,EAH2B;AAKrCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWR,eAAe,CAACS,SAD3B,EACsC,CAACC,KAAD,EAAQpB,MAAR,KAAmB;AACrDoB,MAAAA,KAAK,CAACX,gBAAN,GAAyB,uBAAzB;AACAW,MAAAA,KAAK,CAACZ,gBAAN,GAAyBR,MAAM,CAACqB,OAAhC;AACD,KAJH,EAKGH,OALH,CAKWR,eAAe,CAACY,QAL3B,EAKqC,CAACF,KAAD,EAAQpB,MAAR,KAAmB;AACpDoB,MAAAA,KAAK,CAACX,gBAAN,GAAyB,+BAA+BT,MAAM,CAACuB,KAA/D;AACD,KAPH;AAQD;AAdoC,CAAD,CAA/B;AAiBP,OAAO,MAAMC,YAAY,GAAIJ,KAAD,IAAWA,KAAK,CAACK,MAAtC","sourcesContent":["import { action } from 'commander';\nimport { connectToMetamask, connectToBinance } from './connectWallet';\n\nconst initialState = {\n  accounts: [],\n  connectedMetamask: false,\n  connectedBinance: false,\n  etherUnit: \"1000000000000000000\",\n  connectedAccount: 'Not Connected',\n  connectionStatus: 'Not Connected',\n};\n\nexport const connectMetamask = createAsyncThunk(\n  'wallet/connectMetamask',\n  connectToMetamask\n);\n\nexport const walletSlice = createSlice({\n  name: 'wallet',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(connectMetamask.fulfilled, (state, action) => {\n        state.connectionStatus = 'Connected to Metamask';\n        state.connectedAccount = action.payload;\n      })\n      .addCase(connectMetamask.rejected, (state, action) => {\n        state.connectionStatus = 'User denied account access' + action.error;\n      });\n  },\n});\n\nexport const selectWallet = (state) => state.wallet;\n"]},"metadata":{},"sourceType":"module"}
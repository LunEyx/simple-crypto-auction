{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { connectToMetamask, connectToBinance, joinMetamaskAuction, joinBinanceAuction } from './connectWallet';\nconst initialState = {\n  accounts: [],\n  connectedMetamask: false,\n  connectedBinance: false,\n  etherUnit: \"1000000000000000000\",\n  connectedAccount: 'Not Connected',\n  connectionStatus: 'Not Connected'\n};\nexport const connectMetamask = createAsyncThunk('wallet/connectMetamask', connectToMetamask);\nexport const connectBinance = createAsyncThunk('wallet/connectBinance', connectToBinance);\nexport const joinAuction = createAsyncThunk('wallet/joinAuction', (arg, _ref) => {\n  let {\n    getState\n  } = _ref;\n  const state = getState();\n\n  if (state.wallet.connectedMetamask) {\n    return joinMetamaskAuction();\n  } else if (state.wallet.connectedBinance) {\n    return joinBinanceAuction();\n  }\n});\nexport const walletSlice = createSlice({\n  name: 'wallet',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(connectMetamask.fulfilled, (state, action) => {\n      state.connectedMetamask = true;\n      state.connectionStatus = 'Connected to Metamask';\n      state.connectedAccount = action.payload;\n    }).addCase(connectMetamask.rejected, (state, action) => {\n      state.connectionStatus = 'User denied account access';\n    }).addCase(connectBinance.fulfilled, (state, action) => {\n      state.connectedMetamask = true;\n      state.connectionStatus = 'Connected to Binance';\n      state.connectedAccount = action.payload;\n    }).addCase(connectBinance.rejected, (state, action) => {\n      state.connectionStatus = 'User denied account access';\n    });\n  }\n});\nexport const selectWallet = state => state.wallet;\nexport default walletSlice.reducer;","map":{"version":3,"sources":["/Users/jerry/Documents/simple-crypto-auction/src/features/wallet/walletSlice.js"],"names":["createAsyncThunk","createSlice","connectToMetamask","connectToBinance","joinMetamaskAuction","joinBinanceAuction","initialState","accounts","connectedMetamask","connectedBinance","etherUnit","connectedAccount","connectionStatus","connectMetamask","connectBinance","joinAuction","arg","getState","state","wallet","walletSlice","name","reducers","extraReducers","builder","addCase","fulfilled","action","payload","rejected","selectWallet","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,EAA8CC,mBAA9C,EAAmEC,kBAAnE,QAA6F,iBAA7F;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,iBAAiB,EAAE,KAFA;AAGnBC,EAAAA,gBAAgB,EAAE,KAHC;AAInBC,EAAAA,SAAS,EAAE,qBAJQ;AAKnBC,EAAAA,gBAAgB,EAAE,eALC;AAMnBC,EAAAA,gBAAgB,EAAE;AANC,CAArB;AASA,OAAO,MAAMC,eAAe,GAAGb,gBAAgB,CAC7C,wBAD6C,EAE7CE,iBAF6C,CAAxC;AAKP,OAAO,MAAMY,cAAc,GAAGd,gBAAgB,CAC5C,uBAD4C,EAE5CG,gBAF4C,CAAvC;AAKP,OAAO,MAAMY,WAAW,GAAGf,gBAAgB,CACzC,oBADyC,EAEzC,CAACgB,GAAD,WAAuB;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACrB,QAAMC,KAAK,GAAGD,QAAQ,EAAtB;;AACA,MAAIC,KAAK,CAACC,MAAN,CAAaX,iBAAjB,EAAoC;AAClC,WAAOJ,mBAAmB,EAA1B;AACD,GAFD,MAEO,IAAIc,KAAK,CAACC,MAAN,CAAaV,gBAAjB,EAAmC;AACxC,WAAOJ,kBAAkB,EAAzB;AACD;AACF,CATwC,CAApC;AAWP,OAAO,MAAMe,WAAW,GAAGnB,WAAW,CAAC;AACrCoB,EAAAA,IAAI,EAAE,QAD+B;AAErCf,EAAAA,YAFqC;AAGrCgB,EAAAA,QAAQ,EAAE,EAH2B;AAKrCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWZ,eAAe,CAACa,SAD3B,EACsC,CAACR,KAAD,EAAQS,MAAR,KAAmB;AACrDT,MAAAA,KAAK,CAACV,iBAAN,GAA0B,IAA1B;AACAU,MAAAA,KAAK,CAACN,gBAAN,GAAyB,uBAAzB;AACAM,MAAAA,KAAK,CAACP,gBAAN,GAAyBgB,MAAM,CAACC,OAAhC;AACD,KALH,EAMGH,OANH,CAMWZ,eAAe,CAACgB,QAN3B,EAMqC,CAACX,KAAD,EAAQS,MAAR,KAAmB;AACpDT,MAAAA,KAAK,CAACN,gBAAN,GAAyB,4BAAzB;AACD,KARH,EASGa,OATH,CASWX,cAAc,CAACY,SAT1B,EASqC,CAACR,KAAD,EAAQS,MAAR,KAAmB;AACpDT,MAAAA,KAAK,CAACV,iBAAN,GAA0B,IAA1B;AACAU,MAAAA,KAAK,CAACN,gBAAN,GAAyB,sBAAzB;AACAM,MAAAA,KAAK,CAACP,gBAAN,GAAyBgB,MAAM,CAACC,OAAhC;AACD,KAbH,EAcGH,OAdH,CAcWX,cAAc,CAACe,QAd1B,EAcoC,CAACX,KAAD,EAAQS,MAAR,KAAmB;AACnDT,MAAAA,KAAK,CAACN,gBAAN,GAAyB,4BAAzB;AACD,KAhBH;AAiBD;AAvBoC,CAAD,CAA/B;AA0BP,OAAO,MAAMkB,YAAY,GAAIZ,KAAD,IAAWA,KAAK,CAACC,MAAtC;AAEP,eAAeC,WAAW,CAACW,OAA3B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { connectToMetamask, connectToBinance, joinMetamaskAuction, joinBinanceAuction } from './connectWallet';\n\nconst initialState = {\n  accounts: [],\n  connectedMetamask: false,\n  connectedBinance: false,\n  etherUnit: \"1000000000000000000\",\n  connectedAccount: 'Not Connected',\n  connectionStatus: 'Not Connected',\n};\n\nexport const connectMetamask = createAsyncThunk(\n  'wallet/connectMetamask',\n  connectToMetamask\n);\n\nexport const connectBinance = createAsyncThunk(\n  'wallet/connectBinance',\n  connectToBinance\n);\n\nexport const joinAuction = createAsyncThunk(\n  'wallet/joinAuction',\n  (arg, { getState }) => {\n    const state = getState();\n    if (state.wallet.connectedMetamask) {\n      return joinMetamaskAuction()\n    } else if (state.wallet.connectedBinance) {\n      return joinBinanceAuction()\n    }\n  });\n\nexport const walletSlice = createSlice({\n  name: 'wallet',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(connectMetamask.fulfilled, (state, action) => {\n        state.connectedMetamask = true;\n        state.connectionStatus = 'Connected to Metamask';\n        state.connectedAccount = action.payload;\n      })\n      .addCase(connectMetamask.rejected, (state, action) => {\n        state.connectionStatus = 'User denied account access';\n      })\n      .addCase(connectBinance.fulfilled, (state, action) => {\n        state.connectedMetamask = true;\n        state.connectionStatus = 'Connected to Binance';\n        state.connectedAccount = action.payload;\n      })\n      .addCase(connectBinance.rejected, (state, action) => {\n        state.connectionStatus = 'User denied account access';\n      });\n  },\n});\n\nexport const selectWallet = (state) => state.wallet;\n\nexport default walletSlice.reducer;"]},"metadata":{},"sourceType":"module"}
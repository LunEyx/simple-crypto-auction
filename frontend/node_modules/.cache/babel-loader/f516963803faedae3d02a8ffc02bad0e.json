{"ast":null,"code":"import Web3 from 'web3';\nimport { AUCTION_ADDRESS, ETHER_UNIT } from './constants';\nexport async function connectToMetamask() {\n  console.log(\"Connect Metamask\");\n  window.web3 = new Web3('https://bsc-dataseed1.binance.org:443'); // await window.ethereum.enable();\n\n  const accounts = await window.ethereum.request({\n    method: 'eth_requestAccounts'\n  });\n  return accounts[0];\n}\nexport async function connectToBinance() {\n  console.log(\"Connect Binance\"); //window.BinanceChain = new Web3('https://bsc-dataseed1.binance.org:443');\n\n  await window.BinanceChain.enable();\n  const accounts = await window.BinanceChain.request({\n    method: 'eth_requestAccounts'\n  });\n  return accounts[0];\n}\nexport async function joinMetamaskAuction(bidAmount) {\n  console.log(\"Join Metamask Auction\");\n  const transactionParameters = {\n    value: Web3.utils.numberToHex(bidAmount * ETHER_UNIT),\n    // customizable by user during MetaMask confirmation.\n    to: AUCTION_ADDRESS,\n    // Required except during contract publications.\n    from: window.ethereum.selectedAddress // must match user's active address.\n\n  };\n  return await window.ethereum.request({\n    method: 'eth_sendTransaction',\n    params: [transactionParameters]\n  });\n}\nexport async function joinBinanceAuction(bidAmount) {\n  console.log(\"Join Binance Auction\");\n  const transactionParameters = {\n    value: Web3.utils.numberToHex(bidAmount * ETHER_UNIT),\n    // customizable by user during MetaMask confirmation.\n    to: AUCTION_ADDRESS,\n    // Required except during contract publications.\n    from: window.ethereum.selectedAddress // must match user's active address.\n\n  };\n  return await window.BinanceChain.request({\n    method: 'eth_sendTransaction',\n    params: [transactionParameters]\n  });\n}","map":{"version":3,"sources":["/Users/jerry/Documents/simple-crypto-auction/src/features/wallet/connectWallet.js"],"names":["Web3","AUCTION_ADDRESS","ETHER_UNIT","connectToMetamask","console","log","window","web3","accounts","ethereum","request","method","connectToBinance","BinanceChain","enable","joinMetamaskAuction","bidAmount","transactionParameters","value","utils","numberToHex","to","from","selectedAddress","params","joinBinanceAuction"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,aAA5C;AAEA,OAAO,eAAeC,iBAAf,GAAmC;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAC,EAAAA,MAAM,CAACC,IAAP,GAAc,IAAIP,IAAJ,CAAS,uCAAT,CAAd,CAFwC,CAGxC;;AACA,QAAMQ,QAAQ,GAAG,MAAMF,MAAM,CAACG,QAAP,CAAgBC,OAAhB,CAAwB;AAC7CC,IAAAA,MAAM,EAAE;AADqC,GAAxB,CAAvB;AAGA,SAAOH,QAAQ,CAAC,CAAD,CAAf;AACD;AAED,OAAO,eAAeI,gBAAf,GAAkC;AACvCR,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EADuC,CAEvC;;AACA,QAAMC,MAAM,CAACO,YAAP,CAAoBC,MAApB,EAAN;AACA,QAAMN,QAAQ,GAAG,MAAMF,MAAM,CAACO,YAAP,CAAoBH,OAApB,CAA4B;AACjDC,IAAAA,MAAM,EAAE;AADyC,GAA5B,CAAvB;AAGA,SAAOH,QAAQ,CAAC,CAAD,CAAf;AACD;AAED,OAAO,eAAeO,mBAAf,CAAmCC,SAAnC,EAA8C;AACnDZ,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,QAAMY,qBAAqB,GAAG;AAC5BC,IAAAA,KAAK,EAAElB,IAAI,CAACmB,KAAL,CAAWC,WAAX,CAAuBJ,SAAS,GAAGd,UAAnC,CADqB;AAE5B;AACAmB,IAAAA,EAAE,EAAEpB,eAHwB;AAGP;AACrBqB,IAAAA,IAAI,EAAEhB,MAAM,CAACG,QAAP,CAAgBc,eAJM,CAIU;;AAJV,GAA9B;AAOA,SAAO,MAAMjB,MAAM,CAACG,QAAP,CAAgBC,OAAhB,CAAwB;AACnCC,IAAAA,MAAM,EAAE,qBAD2B;AAEnCa,IAAAA,MAAM,EAAE,CAACP,qBAAD;AAF2B,GAAxB,CAAb;AAID;AAED,OAAO,eAAeQ,kBAAf,CAAkCT,SAAlC,EAA6C;AAClDZ,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,QAAMY,qBAAqB,GAAG;AAC5BC,IAAAA,KAAK,EAAElB,IAAI,CAACmB,KAAL,CAAWC,WAAX,CAAuBJ,SAAS,GAAGd,UAAnC,CADqB;AAE5B;AACAmB,IAAAA,EAAE,EAAEpB,eAHwB;AAGP;AACrBqB,IAAAA,IAAI,EAAEhB,MAAM,CAACG,QAAP,CAAgBc,eAJM,CAIU;;AAJV,GAA9B;AAOA,SAAO,MAAMjB,MAAM,CAACO,YAAP,CAAoBH,OAApB,CAA4B;AACvCC,IAAAA,MAAM,EAAE,qBAD+B;AAEvCa,IAAAA,MAAM,EAAE,CAACP,qBAAD;AAF+B,GAA5B,CAAb;AAID","sourcesContent":["import Web3 from 'web3';\nimport { AUCTION_ADDRESS, ETHER_UNIT } from './constants';\n\nexport async function connectToMetamask() {\n  console.log(\"Connect Metamask\");\n  window.web3 = new Web3('https://bsc-dataseed1.binance.org:443');\n  // await window.ethereum.enable();\n  const accounts = await window.ethereum.request({\n    method: 'eth_requestAccounts'\n  });\n  return accounts[0];\n}\n\nexport async function connectToBinance() {\n  console.log(\"Connect Binance\");\n  //window.BinanceChain = new Web3('https://bsc-dataseed1.binance.org:443');\n  await window.BinanceChain.enable();\n  const accounts = await window.BinanceChain.request({\n    method: 'eth_requestAccounts'\n  });\n  return accounts[0];\n}\n\nexport async function joinMetamaskAuction(bidAmount) {\n  console.log(\"Join Metamask Auction\");\n  const transactionParameters = {\n    value: Web3.utils.numberToHex(bidAmount * ETHER_UNIT), \n    // customizable by user during MetaMask confirmation.\n    to: AUCTION_ADDRESS, // Required except during contract publications.\n    from: window.ethereum.selectedAddress // must match user's active address.\n  };\n  \n  return await window.ethereum.request({\n    method: 'eth_sendTransaction',\n    params: [transactionParameters],\n  });\n}\n\nexport async function joinBinanceAuction(bidAmount) {\n  console.log(\"Join Binance Auction\");\n  const transactionParameters = {\n    value: Web3.utils.numberToHex(bidAmount * ETHER_UNIT), \n    // customizable by user during MetaMask confirmation.\n    to: AUCTION_ADDRESS, // Required except during contract publications.\n    from: window.ethereum.selectedAddress // must match user's active address.\n  };\n  \n  return await window.BinanceChain.request({\n    method: 'eth_sendTransaction',\n    params: [transactionParameters],\n  });\n}"]},"metadata":{},"sourceType":"module"}